1st code

import React, { useEffect, useRef, useState } from 'react';

const Whiteboard = () => {
  const canvasRef = useRef(null);
  const [isDrawing, setIsDrawing] = useState(false);
  const [tool, setTool] = useState('pencil');
  const [strokeColor, setStrokeColor] = useState('#000000');
  const [fillColor, setFillColor] = useState('#ffffff');
  const [strokeWidth, setStrokeWidth] = useState(2);
  const [shapes, setShapes] = useState([]);
  const [currentShape, setCurrentShape] = useState(null);

  // Initialize canvas context
  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    ctx.strokeStyle = strokeColor;
    ctx.lineWidth = strokeWidth;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';
  }, [strokeColor, strokeWidth]);

  // Clear canvas and redraw all shapes
  const redrawCanvas = () => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    shapes.forEach(shape => {
      ctx.beginPath();
      if (shape.type === 'pencil') {
        ctx.strokeStyle = shape.strokeColor;
        ctx.lineWidth = shape.strokeWidth;
        shape.points.forEach((point, index) => {
          if (index === 0) {
            ctx.moveTo(point.x, point.y);
          } else {
            ctx.lineTo(point.x, point.y);
          }
        });
        ctx.stroke();
      } else if (shape.type === 'rectangle') {
        ctx.strokeStyle = shape.strokeColor;
        ctx.fillStyle = shape.fillColor;
        ctx.lineWidth = shape.strokeWidth;
        ctx.fillRect(shape.x, shape.y, shape.width, shape.height);
        ctx.strokeRect(shape.x, shape.y, shape.width, shape.height);
      }
    });
  };

  const startDrawing = (e) => {
    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    setIsDrawing(true);

    if (tool === 'pencil') {
      setCurrentShape({
        type: 'pencil',
        points: [{ x, y }],
        strokeColor,
        strokeWidth
      });
    } else if (tool === 'rectangle') {
      setCurrentShape({
        type: 'rectangle',
        x,
        y,
        width: 0,
        height: 0,
        strokeColor,
        fillColor,
        strokeWidth
      });
    }
  };

  const draw = (e) => {
    if (!isDrawing || !currentShape) return;

    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    if (tool === 'pencil') {
      setCurrentShape(prev => ({
        ...prev,
        points: [...prev.points, { x, y }]
      }));
    } else if (tool === 'rectangle') {
      setCurrentShape(prev => ({
        ...prev,
        width: x - prev.x,
        height: y - prev.y
      }));
    }

    redrawCanvas();
    const ctx = canvas.getContext('2d');

    if (currentShape.type === 'pencil') {
      ctx.beginPath();
      ctx.strokeStyle = strokeColor;
      ctx.lineWidth = strokeWidth;
      currentShape.points.forEach((point, index) => {
        if (index === 0) {
          ctx.moveTo(point.x, point.y);
        } else {
          ctx.lineTo(point.x, point.y);
        }
      });
      ctx.stroke();
    } else if (currentShape.type === 'rectangle') {
      ctx.strokeStyle = strokeColor;
      ctx.fillStyle = fillColor;
      ctx.lineWidth = strokeWidth;
      ctx.fillRect(currentShape.x, currentShape.y, currentShape.width, currentShape.height);
      ctx.strokeRect(currentShape.x, currentShape.y, currentShape.width, currentShape.height);
    }
  };

  const stopDrawing = () => {
    if (isDrawing && currentShape) {
      setShapes(prev => [...prev, currentShape]);
    }
    setIsDrawing(false);
    setCurrentShape(null);
  };

  return (
    <div className="flex flex-col items-start gap-4">
      <div className="flex gap-4 p-4 bg-gray-100 rounded-lg">
        <div className="flex gap-2">
          <button
            className={`px-4 py-2 rounded ${tool === 'pencil' ? 'bg-blue-500 text-white' : 'bg-white'}`}
            onClick={() => setTool('pencil')}
          >
            Pencil
          </button>
          <button
            className={`px-4 py-2 rounded ${tool === 'rectangle' ? 'bg-blue-500 text-white' : 'bg-white'}`}
            onClick={() => setTool('rectangle')}
          >
            Rectangle
          </button>
        </div>
        <div className="flex items-center gap-2">
          <label>Stroke:</label>
          <input
            type="color"
            value={strokeColor}
            onChange={(e) => setStrokeColor(e.target.value)}
          />
        </div>
        <div className="flex items-center gap-2">
          <label>Fill:</label>
          <input
            type="color"
            value={fillColor}
            onChange={(e) => setFillColor(e.target.value)}
          />
        </div>
        <div className="flex items-center gap-2">
          <label>Width:</label>
          <input
            type="range"
            min="1"
            max="20"
            value={strokeWidth}
            onChange={(e) => setStrokeWidth(parseInt(e.target.value))}
          />
        </div>
        <button
          className="px-4 py-2 bg-red-500 text-white rounded"
          onClick={() => {
            setShapes([]);
            redrawCanvas();
          }}
        >
          Clear
        </button>
      </div>
      <canvas
        ref={canvasRef}
        width={800}
        height={600}
        className="border border-gray-300 rounded-lg cursor-crosshair"
        onMouseDown={startDrawing}
        onMouseMove={draw}
        onMouseUp={stopDrawing}
        onMouseOut={stopDrawing}
      />
    </div>
  );
};

export default Whiteboard;
